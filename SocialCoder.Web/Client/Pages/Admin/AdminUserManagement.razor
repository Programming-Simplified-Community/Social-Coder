@page "/Admin/UserManagement"
@inherits QueryComponent
@layout AdminDashboardLayout
@using Microsoft.AspNetCore.Authorization
@using SocialCoder.Web.Client.Models
@using SocialCoder.Web.Client.Shared.Components.Dialogs
@inject ISnackbar Snack
@inject IDialogService DialogService
@attribute [Authorize(Roles = Roles.ElevatedRoles)]

<MudContainer Class="mt-3">
    <PaginatedTable TItem="IGetBasicUserAccounts_Users_Items"
                    @ref="_table"
                    FetchDataFunc="FetchData">
        <ErrorContent>
            <MudPaper Elevation="3">
                <MudAlert Severity="Severity.Error"
                          Icon="@Icons.Material.Filled.Error">
                    <MudText Typo="Typo.h6">@context.Message</MudText>
                </MudAlert>
                @if (context.Exception is not null)
                {
                    <MudText Typo="Typo.subtitle1">
                        @context.Exception.ToString()
                    </MudText>
                }
                <MudText Typo="Typo.caption" Color="Color.Info" Style="font-size: 0.75rem">
                    @context.Code
                </MudText>
            </MudPaper>
        </ErrorContent>
        <HeaderContent>
            <MudTh>Username</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Roles</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Username</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>
                @{
                    var myRoles = context.UserRoles.ToHashSet();
                    <MudMenu StartIcon="@Icons.Material.Filled.AccountTree">
                        @foreach (var role in _roles)
                        {
                            var hasRole = myRoles.Contains(role);
                            var icon = hasRole ? Icons.Material.Filled.Remove : Icons.Material.Filled.Add;
                            var color = hasRole ? Color.Error : Color.Info;
                            
                            <MudMenuItem Icon="@icon" IconColor="@color" OnClick="@(async()=>await UpdateRole(context, !hasRole, role))">
                                @role
                            </MudMenuItem>
                        }
                    </MudMenu>
                }
                @foreach (var role in context.UserRoles)
                {
                    var (icon, color) = role switch {
                        Roles.Administrator => (Icons.Material.Filled.AdminPanelSettings, Color.Info),
                        Roles.Owner => (Icons.Material.Filled.Bolt, Color.Success),
                        _ => (Icons.Material.Filled.AssignmentInd, Color.Surface)
                    };
                    
                    <MudTooltip Text="@role">
                        <MudIcon Icon="@icon" Color="@color"/>
                    </MudTooltip>
                }
            </MudTd>
            <MudTd>
                <MudButton StartIcon="@Icons.Material.Filled.TimeToLeave"
                           IconColor="Color.Tertiary"
                           OnClick="@(async()=>await BanUser(context))">
                    Ban
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Delete"
                           IconColor="Color.Error"
                           OnClick="@(()=>Snack.Add("Not implemented yet", Severity.Info))">
                    Wipe/Delete
                </MudButton>
            </MudTd>
        </RowTemplate>
    </PaginatedTable>
</MudContainer>
@code {

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    readonly DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true
    };

    HashSet<string> _roles = [];
    PaginatedTable<IGetBasicUserAccounts_Users_Items> _table = null!;

    private async Task BanUser(IGetBasicUserAccounts_Users_Items user)
    {
        var dialog = DialogService.Show<ReasonDialog>("Reason for Ban", _dialogOptions);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var response = await GraphQlClient.BanUser.ExecuteAsync(user.UserId, UserId, result.Data.ToString()!);

        if (response.IsErrorResult() || response.Data is null)
        {
            Snack.Add("Error with GraphQL", Severity.Error);
            return;
        }

        if (!response.Data.BanUser.Success)
        {
            Snack.Add(response.Data.BanUser.Message ?? "Error banning user", Severity.Error);
            return;
        }

        _table.RemoveItem(user);
    }
    
    private async Task UpdateRole(IGetBasicUserAccounts_Users_Items user, bool addRole, string roleName)
    {
        List<string> roles = [];
        roles.AddRange(user.UserRoles);
        IGetBasicUserAccounts_Users_Items updatedUser;
        
        if (addRole)
        {
            var response = await GraphQlClient.AddRoleToUser.ExecuteAsync(user.UserId, UserId, roleName);
            if (response.IsErrorResult() || response.Data is null)
            {
                Snack.Add("GraphQL Error", Severity.Error);
                return;
            }

            if (!response.Data.AddRoleToUser.Success)
            {
                Snack.Add(response.Data.AddRoleToUser.Message, Severity.Error);
                return;
            }

            roles.Add(roleName);
            updatedUser = new GetBasicUserAccounts_Users_Items_BasicUserAccountInfo(user.UserId, user.Username, user.Email, roles);
        }
        else
        {
            var response = await GraphQlClient.RemoveRoleFromUser.ExecuteAsync(user.UserId, UserId, roleName);
            if (response.IsErrorResult() || response.Data is null)
            {
                Snack.Add("GraphQL Error", Severity.Error);
                return;
            }

            if (!response.Data.RemoveRoleFromUser.Success)
            {
                Snack.Add(response.Data.RemoveRoleFromUser.Message, Severity.Error);
                return;
            }

            roles.Remove(roleName);
            updatedUser = new GetBasicUserAccounts_Users_Items_BasicUserAccountInfo(user.UserId, user.Username, user.Email, roles);
        }
        
        _table.ReplaceItem(x=>x.UserId == user.UserId, updatedUser);
    }
        
    private async Task<QueryResponse<IGetBasicUserAccounts_Users_Items>>  FetchData(PageInfo info)
    {
        var response = await GraphQlClient.GetBasicUserAccounts.ExecuteAsync(info.Take, info.Skip);
        
        if (response.Data?.Roles.Any() ?? false)
            _roles = response.Data.Roles.Select(x => x.Name).ToHashSet();
        
        return new QueryResponse<IGetBasicUserAccounts_Users_Items>
        {
            Errors = response.Errors,
            Items = response.Data?.Users?.Items?.ToList() ?? [],
            TotalDbCount = response.Data?.Users?.TotalCount ?? 0
        };
    }
}