@using System.Globalization

<div class="hex-progress-bar-container" style="width: @(Size + "px"); height: @(Size + "px");">
    <svg viewBox="0 0 @Size @Size" class="hex-progress-bar-svg">
        @*Background Hexagon (optional for visual clarity when not filled)*@
        <polygon points="@HexagonPoints"
                 fill="none"
                 stroke="@BackgroundColor"
                 stroke-width="@StrokeWidth"
                 stroke-linejoin="round"
                 stroke-linecap="round"/>
        
        @*Progress Hexagon*@
        <polygon points="@HexagonPoints"
                 fill="none"
                 stroke="@ProgressColor"
                 stroke-width="@StrokeWidth"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 stroke-dasharray="@StrokeDashArray"
                 stroke-dashoffset="@StrokeDashOffset"
                 transform="rotate(-90 @HexCenterX @HexCenterY)"/> @*Rotate to start at the top*@
    </svg>
    
    <div class="hex-content-center">
        @ChildContent
    </div>
</div>


<style>
    .hex-progress-bar-container {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .hex-content-center {
        position: relative;
        z-index: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
    }
    
    .hex-progress-bar-svg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transition: stroke-dashoffset 0.5s ease-in-out; /*Smooth transition for progress changes*/
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Value between 0 and 100
    /// </summary>
    [Parameter] public double Progress { get; set; }
    
    /// <summary>
    /// Size of SVG viewbox
    /// </summary>
    [Parameter] public double Size { get; set; } = 100;

    /// <summary>
    /// Color to use for ProgressBar
    /// </summary>
    [Parameter] public string ProgressColor { get; set; } = "#E91E63";

    /// <summary>
    /// Background Color 
    /// </summary>
    [Parameter] public string BackgroundColor { get; set; } = "#343434";

    /// <summary>
    /// Thickness of Progress Bar
    /// </summary>
    [Parameter] public double StrokeWidth { get; set; } = 8;
    

    /// <summary>
    /// Radius of the Hexagon. Adjusted for stroke width and padding
    /// </summary>
    private double HexRadius => (Size / 2) - (StrokeWidth / 2 + 2);
    
    private const double HexCenterX = 50;
    private const double HexCenterY = 50;

    private string HexagonPoints { get; set; } = "";
    private double HexagonPerimeter { get; set; }

    private string StrokeDashArray => HexagonPerimeter.ToString(CultureInfo.InvariantCulture);
    private string StrokeDashOffset => (HexagonPerimeter - (HexagonPerimeter * Progress / 100)).ToString(CultureInfo.InvariantCulture);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CalculateHexagonPoints();
        CalculateHexagonPerimeter();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CalculateHexagonPoints();
        CalculateHexagonPerimeter();
    }

    private void CalculateHexagonPoints()
    {
        var effectiveRadius = Math.Max(1, HexRadius);
        
        var points = new List<string>();

        for (var i = 0; i < 6; i++)
        {
            var angleDeg = 60 * i;
            var angleRad = Math.PI / 180 * angleDeg;
            var x = HexCenterX + effectiveRadius * Math.Cos(angleRad);
            var y = HexCenterY + effectiveRadius * Math.Sin(angleRad);
            points.Add($"{x.ToString(CultureInfo.InvariantCulture)},{y.ToString(CultureInfo.InvariantCulture)}");
        }

        HexagonPoints = string.Join(" ", points);
        HexagonPerimeter = 6 * effectiveRadius;
    }

    private void CalculateHexagonPerimeter()
    {
        // For a regular hexagon, perimeter is 6 * side length
        // Side length for a hexagon inscribed in a circle with radius R is also R
        HexagonPerimeter = 6 * HexRadius;
    }
}