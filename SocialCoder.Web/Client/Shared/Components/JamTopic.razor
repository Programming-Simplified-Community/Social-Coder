@using SocialCoder.Web.Shared.Models.CodeJam
@using SocialCoder.Web.Shared.ViewModels.CodeJam
@using SocialCoder.Web.Shared
@using SocialCoder.Web.Shared.Requests.CodeJam
@inject HttpClient Client
@inject ISnackbar Snack

<MudItem>
    <MudPaper Style="border-radius: 25px;">
        <MudContainer
            Class="codejam-topic-background-image"
            Style="@_image"/>
        <MudContainer Class="pb-3">
            <MudText Typo="Typo.h4">@Topic.Title</MudText>

            @* Display dates for topic *@
            <MudList>
                <MudListItem Icon="@Icons.TwoTone.PersonAdd" IconColor="Color.Success">
                    <MudText Typo="Typo.body1">
                        @Topic.RegistrationStartDate.ToRealLocalTime().ToString("dddd, MMMM dd - yyyy")
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Style="font-size: 0.6rem;">
                        @Topic.RegistrationStartDate.ToRealLocalTime().ToString("t")
                    </MudText>
                </MudListItem>
                <MudListItem Icon="@Icons.TwoTone.Event"
                             IconColor="Color.Tertiary">
                    <MudText Typo="Typo.body1">
                        @Topic.JamStartDate.ToRealLocalTime().ToString("dddd, MMMM dd - yyyy")
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Style="font-size: 0.6rem;" Color="Color.Secondary">
                        @Topic.JamStartDate.ToRealLocalTime().ToString("t")
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Style="font-size: 0.6rem;" Color="Color.Info">
                        Length: @((Topic.JamEndDate - Topic.JamStartDate).TotalDays) Days
                    </MudText>
                </MudListItem>
            </MudList>

            <MudText Typo="Typo.body1" Style="color: #9aa4bf">
                @Topic.Description
            </MudText>
            
            <MudGrid Class="mt-6 mb-4">
                <MudItem md="6">
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-size: 1rem;">Solo Applicants</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center" Style="font-size: 0.75rem; color: #9aa4bf">
                        @Model.TotalSoloApplicants/@Model.TotalApplicants
                    </MudText>
                </MudItem>

                <MudItem md="6">
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-size: 1rem;">Team Applicants</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center" Style="font-size: 0.75rem; color: #9aa4bf">
                        @Model.TotalTeamApplicants/@Model.TotalApplicants
                    </MudText>
                </MudItem>
            </MudGrid>
        
            @{
                var icon = !Model.IsRegistered ? Icons.Filled.PersonAdd : Icons.Filled.ExitToApp;
                var color = !Model.IsRegistered ? Color.Tertiary : Color.Warning;
                var text = !Model.IsRegistered ? "Register" : "Withdraw";
            }
            <MudButton IconColor="@color" StartIcon="@icon"
                       OnClick="@(async ()=> await Action())">
                @text
            </MudButton>        
            
        </MudContainer>
    </MudPaper>
</MudItem>

@code {

    [Parameter]
    public CodeJamViewModel Model { get; set; } = new();
    public CodeJamTopic Topic => Model.Topic ?? new();

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

    string _image;
    Dictionary<string, object> backgroundAttributes = new();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _image = string.IsNullOrEmpty(Topic.BackgroundImageUrl) 
            ? Images.RandomBackgroundImage() 
            : Topic.BackgroundImageUrl;
        _image = $"background-image: url(\"{_image}\");";
    }

    async Task Action()
    {
        var response = await Client.PostAsJsonAsync(string.Format(
            !Model.IsRegistered 
            ? Endpoints.CODE_JAM_POST_TOPIC_REGISTER 
            : Endpoints.CODE_JAM_POST_TOPIC_WITHDRAW, Topic.Id), new CodeJamRegistrationRequest
        {
            PreferTeam = true,
            TopicId = Topic.Id
        });

        if (response.IsSuccessStatusCode)
            Snack.Add(Model.IsRegistered ? $"Successfully withdrawn from {Topic.Title}" : $"Successfully registered for {Topic.Title}", Severity.Success);
        else 
            Snack.Add(response.ReasonPhrase ?? await response.Content.ReadAsStringAsync(), Severity.Error);
    }
}