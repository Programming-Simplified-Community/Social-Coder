@using SocialCoder.Web.Shared.Requests
@using SocialCoder.Web.Shared.ViewModels.CodeJam
@using SocialCoder.Web.Shared.Models.CodeJam

@inject ICodeJamService _cj

<PaginatedTable TItem="CodeJamAdminViewModel" 
                FetchDataFunc="FetchData">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Registration</MudTh>
        <MudTh>Active Period</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Team Applicants</MudTh>
        <MudTh>Solo Applicants</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Topic.Title</MudTd>
        <MudTd>
            @context.Topic.RegistrationStartDate.ToString("d")
            <MudIcon Icon="@Icons.Filled.ArrowRight" Style="position: relative; top: 7px"/>
            @context.Topic.JamStartDate.ToString("d")
        </MudTd>
        <MudTd>
            @context.Topic.JamStartDate.ToString("d")
            <MudIcon Icon="@Icons.Filled.ArrowRight" Style="position: relative; top: 7px"/>
            @context.Topic.JamEndDate.ToString("d")
        </MudTd>
        <MudTd>
            @{
                var state = GetStatus(context.Topic);

                if (!string.IsNullOrEmpty(state.Text))
                {
                    <MudTooltip Text="@state.Text">
                        <MudIcon Color="Color.Secondary" Icon="@state.Icon"/>
                    </MudTooltip>
                }
            }
        </MudTd>
        <MudTd>@context.TotalTeamApplicants</MudTd>
        <MudTd>@context.TotalSoloApplicants</MudTd>
        <MudTd>
            <MudButton Color="Color.Error">
                <MudIcon Icon="@Icons.Filled.Delete"/>
            </MudButton>
        </MudTd>
    </RowTemplate>
</PaginatedTable>

@code {
    private (string Text, string Icon) GetStatus(CodeJamTopic topic)
    {
        var now = DateTime.UtcNow;

        if (now >= topic.RegistrationStartDate && now <= topic.JamStartDate)
            return ("Accepting Applicants", Icons.Filled.AppRegistration);
        
        if (now >= topic.JamStartDate && now <= topic.JamEndDate)
            return ("Active", Icons.Filled.Campaign);

        return now >= topic.JamEndDate 
            ? ("Completed", Icons.Filled.Done) 
            : (string.Empty, Icons.Filled.AccessTime);
    }
    
    private async Task<PaginatedResponse<CodeJamAdminViewModel>> FetchData(PaginationRequest settings)
        => await _cj.AdminGetTopics(settings);

}