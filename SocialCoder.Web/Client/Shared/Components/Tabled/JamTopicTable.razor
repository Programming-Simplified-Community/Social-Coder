@using SocialCoder.Web.Client.Models
@using SocialCoder.Web.Client.Shared.Components.Dialogs
@inherits QueryComponent
@inject ICodeJamService Cj
@inject IDialogService DialogService
@inject ISnackbar Snack

<MudContainer Class="mt-3 mb-3">
    <PaginatedTable TItem="IGetTopicsWithUserInfo_Topics_Items"
                    @ref="@_table"
                    FetchDataFunc="FetchData">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Code Jam Topics</MudText>
            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Filled.Create" IconColor="Color.Info" OnClick="@(async ()=> await ShowDialog(null))">
                New Topic
            </MudButton>
        </ToolBarContent>
        <ErrorContent>
            <MudPaper Elevation="3">
                <MudAlert Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">
                    <MudText Typo="Typo.h6">@context.Message</MudText>
                </MudAlert>

                @if (context.Exception is not null)
                {
                    <MudText Typo="Typo.subtitle1">
                        @context.Exception.ToString()
                    </MudText>
                }

                <MudText Color="Color.Info" Typo="Typo.caption" Style="font-size: 0.75rem;">
                    @context.Code
                </MudText>
            </MudPaper>
        </ErrorContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Registration</MudTh>
            <MudTh>Active Period</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Team Applicants</MudTh>
            <MudTh>Solo Applicants</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Title</MudTd>
            <MudTd>
                @context.RegistrationStartDate.ToString("d")
                <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Style="position: relative; top: 7px"/>
                @context.JamStartDate.ToString("d")
            </MudTd>
            <MudTd>
                @context.JamStartDate.ToString("d")
                <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Style="position: relative; top: 7px"/>
                @context.JamEndDate.ToString("d")
            </MudTd>
            <MudTd>
                @{
                    var state = GetStatus(context);

                    if (!string.IsNullOrEmpty(state.Text))
                    {
                        <MudTooltip Text="@state.Text">
                            <MudIcon Color="Color.Secondary" Icon="@state.Icon"/>
                        </MudTooltip>
                    }
                }
            </MudTd>
            <MudTd>@context.TeamApplicants</MudTd>
            <MudTd>@context.SoloApplicants</MudTd>
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(async () => await DeleteCodeJam(context))">
                    <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                </MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Info" OnClick="@(async () => await ShowDialog(context))">

                </MudButton>
            </MudTd>
        </RowTemplate>
    </PaginatedTable>
</MudContainer>

@code {

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    private PaginatedTable<IGetTopicsWithUserInfo_Topics_Items> _table;
    private (string Text, string Icon) GetStatus(IGetTopicsWithUserInfo_Topics_Items topic)
    {
        var now = DateTime.UtcNow;

        if (now >= topic.RegistrationStartDate && now <= topic.JamStartDate)
            return ("Accepting Applicants", Icons.Material.Filled.AppRegistration);
        
        if (now >= topic.JamStartDate && now <= topic.JamEndDate)
            return ("Active", Icons.Material.Filled.Campaign);

        return now >= topic.JamEndDate 
            ? ("Completed", Icons.Material.Filled.Done) 
            : (string.Empty, Icons.Material.Filled.AccessTime);
    }

    private async Task DeleteCodeJam(IGetTopicsWithUserInfo_Topics_Items topic)
    {
        var response = await Cj.Delete(topic.TopicId, UserId);

        if (!response.Success)
            Snack.Add(response.Message ?? "Failed to delete topic", Severity.Error);
        else
        {
            Snack.Add("Successfully deleted topic", Severity.Success);
            _table.RemoveItem(topic);
            StateHasChanged();
        }
    }

    private async Task<QueryResponse<IGetTopicsWithUserInfo_Topics_Items>> FetchData(PageInfo info)
    {
        var response = await GraphQlClient.GetTopicsWithUserInfo.ExecuteAsync(info.Take, info.Skip, UserId);
        
        return new QueryResponse<IGetTopicsWithUserInfo_Topics_Items>
        {
            Errors = response.Errors,
            Items = response.Data?.Topics?.Items?.ToList() ?? [],
            TotalDbCount = response.Data?.Topics?.TotalCount ?? 0
        };
    }

    private readonly DialogOptions _options = new()
    {
        FullWidth = true,
        MaxWidth = MaxWidth.Large,
        Position = DialogPosition.Center
    };
    
    private async Task ShowDialog(IGetTopicsWithUserInfo_Topics_Items? item)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(TopicDialog.Incoming), item);

        var dialog = DialogService.Show<TopicDialog>("Topic Dialog", parameters, _options);
        var result = await dialog.Result;

        if (result.Canceled || result.Data is null)
            return;

        var data = (CodeJamTopic) result.Data;
        
        // For certain items here provided by GraphQL -- we're just reusing old data
        // the primary info we wanted to have updated is TOPIC specific
        var newItem = new GetTopicsWithUserInfo_Topics_Items_CodeJamTopic(
            item?.IsRegistered ?? false,
            data.Id,
            data.BackgroundImageUrl,
            data.RegistrationStartDate,
            data.JamStartDate,
            data.JamEndDate,
            data.Title,
            data.Description,
            item?.SoloApplicants ?? 0,
            item?.TeamApplicants ?? 0,
            item?.TotalApplicants ?? 0,
            data.IsActive);

        if (item is not null)
            _table.ReplaceItem(x => x.TopicId == item.TopicId, newItem);
        else
            _table.Items?.Items.Add(newItem);
        
        StateHasChanged();
    }
}