@inject HttpClient Client
@inject ISnackbar Snack
@inject ICodeJamService Cj

<MudItem>
    <MudPaper Style="border-radius: 25px;">
        <MudContainer
            Class="codejam-topic-background-image"
            Style="@_image"/>
        <MudContainer Class="pb-3">
            <MudText Typo="Typo.h4" Class="mt-2">@Model.Title</MudText>

            @* Display dates for topic *@
            <MudList>
                <MudListItem Icon="@Icons.TwoTone.PersonAdd" IconColor="Color.Success">
                    <MudText Typo="Typo.body1">
                        @Model.RegistrationStartDate.ToRealLocalTime().ToString("dddd, MMMM dd - yyyy")
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary" Style="font-size: 0.6rem;">
                        @Model.RegistrationStartDate.ToRealLocalTime().ToString("t")
                    </MudText>
                </MudListItem>
                <MudListItem Icon="@Icons.TwoTone.Event"
                             IconColor="Color.Tertiary">
                    <MudText Typo="Typo.body1">
                        @Model.JamStartDate.ToRealLocalTime().ToString("dddd, MMMM dd - yyyy")
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Style="font-size: 0.6rem;" Color="Color.Secondary">
                        @Model.JamStartDate.ToRealLocalTime().ToString("t")
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Style="font-size: 0.6rem;" Color="Color.Info">
                        Length: @((Model.JamEndDate - Model.JamStartDate).TotalDays) Days
                    </MudText>
                </MudListItem>
            </MudList>

            <MudText Typo="Typo.body1" Style="color: #9aa4bf">
                @Model.Description
            </MudText>
            
            <MudGrid Class="mt-6 mb-4">
                <MudItem md="6">
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-size: 1rem;">Solo Applicants</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center" Style="font-size: 0.75rem; color: #9aa4bf">
                        @Model.SoloApplicants/@Model.TotalApplicants
                    </MudText>
                </MudItem>

                <MudItem md="6">
                    <MudText Typo="Typo.h6" Align="Align.Center" Style="font-size: 1rem;">Team Applicants</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center" Style="font-size: 0.75rem; color: #9aa4bf">
                        @Model.TeamApplicants/@Model.TotalApplicants
                    </MudText>
                </MudItem>
            </MudGrid>
        
            @{
                var icon = !Model.IsRegistered ? Icons.Filled.PersonAdd : Icons.Filled.ExitToApp;
                var color = !Model.IsRegistered ? Color.Tertiary : Color.Warning;
                var text = !Model.IsRegistered ? "Register" : "Withdraw";
            }
            
            @if (Model.IsRegistered)
            {
                <MudButton IconColor="@color" StartIcon="@icon"
                           OnClick="@(async ()=> await Action(false))">
                    @text
                </MudButton>    
            }
            else
            {
                <MudMenu Label="Register" Variant="Variant.Text" Color="@color">
                    <div class="d-flex align-content-center">
                        <MudTooltip Text="Solo">
                            <MudIconButton Class="mx-2" Color="Color.Tertiary" Icon="@Icons.Filled.Person" OnClick="@(async()=>await Action(false))"/>
                        </MudTooltip>
                        
                        <MudTooltip Text="Team">
                            <MudIconButton Class="mx-2" Color="Color.Info" Icon="@Icons.Filled.People" OnClick="@(async()=>await Action(true))"/>
                        </MudTooltip>
                    </div>
                </MudMenu>
            }
        </MudContainer>
    </MudPaper>
</MudItem>

@code {

    [Parameter]
    public IGetTopicsWithUserInfo_Topics_Items Model { get; set; }

    string _image;
    Dictionary<string, object> backgroundAttributes = new();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _image = string.IsNullOrEmpty(Model.BackgroundImageUrl) 
            ? Images.RandomBackgroundImage() 
            : Model.BackgroundImageUrl;
        _image = $"background-image: url(\"{_image}\");";
    }

    async Task Action(bool isTeam)
    {
        ResultOf<CodeJamViewModel> response;

        if (!Model.IsRegistered)
            response = await Cj.Register(new()
            {
                PreferTeam = isTeam,
                TopicId = Model.TopicId
            }, string.Empty);
        else
            response = await Cj.Abandon(new()
            {
                TopicId = Model.TopicId
            }, string.Empty);

        if (!response.Success || response.Data is null)
        {
            Snack.Add(response.Message, Severity.Error);
            return;
        }

        Snack.Add(Model.IsRegistered ? $"Successfully withdrawn from {Model.Title}" : $"Successfully registered for {Model.Title}", Severity.Success);
        Model = new GetTopicsWithUserInfo_Topics_Items_CodeJamTopic(response.Data.IsRegistered,
            response.Data.Topic.Id,
            response.Data.Topic.BackgroundImageUrl,
            response.Data.Topic.RegistrationStartDate,
            response.Data.Topic.JamStartDate,
            response.Data.Topic.JamEndDate,
            response.Data.Topic.Title,
            response.Data.Topic.Description,
            response.Data.TotalSoloApplicants,
            response.Data.TotalTeamApplicants,
            response.Data.TotalApplicants, true);        
        
        StateHasChanged();
    }
}