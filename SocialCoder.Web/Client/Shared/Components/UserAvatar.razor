@inject IJSRuntime JsRuntime

<div style="display: flex; justify-content: center;">
    <div style="display: inline">
        <div style="position: relative; max-width: @(Width)px">
            <div class="user-avatar-border">
                <div class="hexagon-progress" style="width: @(Width)px; height: @(Height)px; position:  relative;"></div>
            </div>

            <div class="user-avatar-content"
                 style="position: absolute; 
                 top: @(Width * 0.16)px; 
                 left: @(Height * 0.17)px;">
                <div class="hexagon-image"
                     data-src="@AvatarImage"
                     style="width: @(Width * 0.683)px; 
                    height:  @(Height * 0.683); 
                    position:  relative;"></div>
            </div>

            <div class="user-avatar-badge" style="display: flex;
        flex-wrap:  wrap;
        align-items: center;
        justify-content: center; 
        position: absolute;
        bottom: 25px;
        right: -3px;">

                <div class="user-avatar-badge-border" style="
            display:  inline-block;
            position: absolute;
            z-index: 1">
                    <div class="hexagon-avatar-badge"
                         style="width: 32px; height: 36px; position: absolute;"></div>
                </div>

                <div class="user-avatar-badge-content"
                     style="
                 display: inline-block;
                 z-index: 5; 
                 position: absolute;">
                    <div class="hexagon-dark" style="width: 26px; 
                                             height:  28px; 
                                             position:  relative;"></div>
                </div>
                <p class="user-avatar-badge-text" style="
                position: absolute; 
                pointer-events: none; 
                z-index: 6; 
                display:  inline-block;
                font-weight: 700;">
                    @UserLevel
                </p>
            </div>
        </div>
    </div>
</div>
@code {
    
    [Parameter]
    public string AvatarImage { get; set; }

    [Parameter]
    public int UserLevel { get; set; }

    [Parameter]
    public int Progress { get; set; }

    [Parameter]
    public int ProgressMin { get; set; } = 0;

    [Parameter]
    public int ProgressMax { get; set; } = 100;

    [Parameter]
    public int Width { get; set; } = 100;

    [Parameter]
    public int Height { get; set; } = 100;

    [Parameter]
    public int LineWidth { get; set; } = 8;

    [Parameter]
    public Color ProgressColor { get; set; } = Color.Primary;

    [Parameter]
    public RenderFragment? CenterContent { get; set; }

    [Parameter]
    public Color BadgeLineColor { get; set; } = Color.Secondary;

    [Parameter]
    public Color BadgeColor { get; set; } = Color.Tertiary;

    MudTheme _theme = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*
            It is worth mentioning that 
            
            1. To have the line color appear -- you cannot use the gradient value
            2. To see the progress bar you cannot use the fill or clip value -- those are for images
            3. These methods are called AFTER render because we want to make sure our 
               DOM elements are present before executing these scripts
         */
        
        await JsRuntime.InvokeVoidAsync("createHexagon", new
        {
            width = Width,
            height = Height,
            container = ".hexagon-progress",
            roundedCorners = true,
            lineWidth = LineWidth,
            lineColor = ColorUtil.GetCssValue(_theme, ProgressColor),
            scale = new { start = 0, end = 1, stop = MathUtil.GetNormalizedPercentage(Progress, ProgressMin, ProgressMax) }
        });

        await JsRuntime.InvokeVoidAsync("createHexagon", new
        {
            width = 68,
            Height = 68,
            container = ".hexagon-image",
            roundedCorners = true,
            clip = true
        });
        
        await JsRuntime.InvokeVoidAsync("createHexagon", new
        {
            container = ".hexagon-dark",
            width = 26,
            height = 28,
            roundedCorners = true,
            roundedCornerRadius = 1,
            lineColor = ColorUtil.GetCssValue(_theme, BadgeLineColor),
            fill = true
        });

        await JsRuntime.InvokeVoidAsync("createHexagon", new
        {
            container = ".hexagon-avatar-badge",
            width = 32,
            height = 36,
            fill = true,
            roundedCorners = true,
            roundedCornerRadius = 1,
            lineColor = ColorUtil.GetCssValue(_theme, BadgeColor)
        });
    }

}