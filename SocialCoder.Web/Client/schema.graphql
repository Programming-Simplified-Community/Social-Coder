schema {
  query: GraphQLQueries
}

"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

type GraphQLQueries {
  topics(
    skip: Int
    take: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: CodeJamTopicFilterInput
    order: [CodeJamTopicSortInput!]
  ): TopicsCollectionSegment
  users(
    skip: Int
    take: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: BasicUserAccountInfoFilterInput
    order: [BasicUserAccountInfoSortInput!]
  ): UsersCollectionSegment
}

input CodeJamTopicFilterInput {
  and: [CodeJamTopicFilterInput!]
  or: [CodeJamTopicFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  backgroundImageUrl: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  jamStartDate: DateTimeOperationFilterInput
  jamEndDate: DateTimeOperationFilterInput
  registrationStartDate: DateTimeOperationFilterInput
  codeJamRegistrations: ListFilterInputTypeOfCodeJamRegistrationFilterInput
}

input CodeJamTopicSortInput {
  id: SortEnumType
  title: SortEnumType
  description: SortEnumType
  backgroundImageUrl: SortEnumType
  isActive: SortEnumType
  jamStartDate: SortEnumType
  jamEndDate: SortEnumType
  registrationStartDate: SortEnumType
}

input BasicUserAccountInfoFilterInput {
  and: [BasicUserAccountInfoFilterInput!]
  or: [BasicUserAccountInfoFilterInput!]
  userId: StringOperationFilterInput
  email: StringOperationFilterInput
  username: StringOperationFilterInput
}

input BasicUserAccountInfoSortInput {
  userId: SortEnumType
  email: SortEnumType
  username: SortEnumType
}

"""
A segment of a collection.
"""
type TopicsCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [CodeJamTopic!]
  totalCount: Int!
}

"""
A segment of a collection.
"""
type UsersCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [BasicUserAccountInfo!]
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfCodeJamRegistrationFilterInput {
  all: CodeJamRegistrationFilterInput
  none: CodeJamRegistrationFilterInput
  some: CodeJamRegistrationFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about the offset pagination.
"""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

type CodeJamTopic {
  title: String!
  description: String!
  backgroundImageUrl: String
  isActive: Boolean!
  jamStartDate: DateTime!
  jamEndDate: DateTime!
  registrationStartDate: DateTime!
  codeJamRegistrations: [CodeJamRegistration!]!
  topicId: Int!
  totalApplicants: Int!
  teamApplicants: Int!
  isRegistered(userId: String): Boolean!
  soloApplicants: Int!
}

type BasicUserAccountInfo {
  userId: String!
  email: String!
  username: String!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

input CodeJamRegistrationFilterInput {
  and: [CodeJamRegistrationFilterInput!]
  or: [CodeJamRegistrationFilterInput!]
  id: IntOperationFilterInput
  userId: StringOperationFilterInput
  codeJamTopicId: IntOperationFilterInput
  registeredOn: DateTimeOperationFilterInput
  abandonedOn: DateTimeOperationFilterInput
  preferTeam: BooleanOperationFilterInput
  codeJamTopic: CodeJamTopicFilterInput
}

type AuthorizeDirective {
  policy: String
  roles: [String!]
  apply: ApplyPolicy!
}

type CodeJamRegistration {
  id: ID
  userId: String!
  codeJamTopicId: Int!
  registeredOn: DateTime!
  abandonedOn: DateTime
  preferTeam: Boolean!
  codeJamTopic: CodeJamTopic!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}
